<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/8/12
 * Time: 22:31
 */


namespace app\index\controller;

use app\common\controller\Frontend;
use think\Lang;
use think\Db;
use QL\QueryList;
use think\Log;

/**
 * Ajax异步请求接口
 * @internal
 */
class Caiji
{
    private $parent_id = 0;
    private $last_id = 0;
    private $food_list_id = 0;


    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public function meet(){
        //采集某页面所有的图片
        $url = 'https://www.meishichina.com/YuanLiao/category/rql/';
        $data = [];
        //猪肉分类
        $data[0] = QueryList::get($url)->find('div.category_sub:nth-child(1) > ul > li > a')->attrs('title');
        //牛肉分类
        $data[1] = QueryList::get($url)->find('div.category_sub:nth-child(2) > ul > li > a')->attrs('title');
        //鸡肉分类
        $data[2] = QueryList::get($url)->find('div.category_sub:nth-child(3) > ul > li > a')->attrs('title');
        //羊肉分类
        $data[3] = QueryList::get($url)->find('div.category_sub:nth-child(4) > ul > li > a')->attrs('title');
        //蛋类
        $data[4] = QueryList::get($url)->find('div.category_sub:nth-child(5) > ul > li > a')->attrs('title');
        //其它肉类
        $data[5] = QueryList::get($url)->find('div.category_sub:nth-child(6) > ul > li > a')->attrs('title');
        //其它禽类
        $data[6] = QueryList::get($url)->find('div.category_sub:nth-child(7) > ul > li > a')->attrs('title');

        $url = $this->curl_get($url);
        $title = QueryList::rules(array(
            'big_category' => array('body > div.wrap > div > div.category_box.mt20 > div > h3','text'),
        ));
        $data1 = $title->setHtml($url)->removeHead()->query()->getData();
//        var_dump($data1);
//        var_dump($data);exit;
        $temp = [];
        foreach($data as $key => $value){
            foreach($value as $k => $v){
                $r = self::_checkShiCaiCategory($data1[$key]['big_category'],1);
                if ($r){
                    $tmp['parent_id'] = 0;
                    $tmp['category_name'] = $data1[$key]['big_category'];
                    $tmp['create_time'] = date('Y-m-d H:i:s');
                    $tmp['update_time'] = date('Y-m-d H:i:s');
                    $res = Db::name('shicai_category')->insert($tmp);
                    if ($res){
                        $this->parent_id = Db::name('shicai_category')->getLastInsID();
                    }else{

                    }
                }
                $result = self::_checkShiCaiCategory($v,2);
                $temp['parent_id'] = $this->parent_id;
                $temp['category_name'] = $v;
                $temp['create_time'] = date('Y-m-d H:i:s');
                $temp['update_time'] = date('Y-m-d H:i:s');
                if ($result){
                    $res = Db::name('shicai_category')->insert($temp);
                }else{
                    $res = false;
                }
                if ($res){
                    echo '采集分类成功';
                }
            }
        }
    }

    public function shuichanpin(){
        //采集某页面所有的图片
        $url = 'https://www.meishichina.com/YuanLiao/category/scl/';
        $data = [];
        //淡水鱼
        $data[0] = QueryList::get($url)->find('div.category_sub:nth-child(1) > ul > li > a')->attrs('title');
        //海水鱼
        $data[1] = QueryList::get($url)->find('div.category_sub:nth-child(2) > ul > li > a')->attrs('title');
        //虾类
        $data[2] = QueryList::get($url)->find('div.category_sub:nth-child(3) > ul > li > a')->attrs('title');
        //蟹类
        $data[3] = QueryList::get($url)->find('div.category_sub:nth-child(4) > ul > li > a')->attrs('title');
        //贝类
        $data[4] = QueryList::get($url)->find('div.category_sub:nth-child(5) > ul > li > a')->attrs('title');
        //其他水产类
        $data[5] = QueryList::get($url)->find('div.category_sub:nth-child(6) > ul > li > a')->attrs('title');

        $url = $this->curl_get($url);
        $title = QueryList::rules(array(
            'big_category' => array('body > div.wrap > div > div.category_box.mt20 > div > h3','text'),
        ));
        $data1 = $title->setHtml($url)->removeHead()->query()->getData();
        $temp = [];
        foreach($data as $key => $value){
            foreach($value as $k => $v){
                $r = self::_checkShiCaiCategory($data1[$key]['big_category'],1);
                if ($r){
                    $tmp['parent_id'] = 0;
                    $tmp['category_name'] = $data1[$key]['big_category'];
                    $tmp['create_time'] = date('Y-m-d H:i:s');
                    $tmp['update_time'] = date('Y-m-d H:i:s');
                    $res = Db::name('shicai_category')->insert($tmp);
                    if ($res){
                        $this->parent_id = Db::name('shicai_category')->getLastInsID();
                    }else{

                    }
                }
                $result = self::_checkShiCaiCategory($v,2);
                $temp['parent_id'] = $this->parent_id;
                $temp['category_name'] = $v;
                $temp['create_time'] = date('Y-m-d H:i:s');
                $temp['update_time'] = date('Y-m-d H:i:s');
                if ($result){
                    $res = Db::name('shicai_category')->insert($temp);
                }else{
                    $res = false;
                }
                if ($res){
                    echo '采集分类成功';
                }
            }
        }
    }

    public function shucai(){
        //采集某页面所有的图片
        $url = 'https://www.meishichina.com/YuanLiao/category/shucailei/';
        $data = [];
        //茎叶类
        $data[0] = QueryList::get($url)->find('div.category_sub:nth-child(1) > ul > li > a')->attrs('title');
        //瓜菜类
        $data[1] = QueryList::get($url)->find('div.category_sub:nth-child(2) > ul > li > a')->attrs('title');
        //果实类
        $data[2] = QueryList::get($url)->find('div.category_sub:nth-child(3) > ul > li > a')->attrs('title');
        //根茎类
        $data[3] = QueryList::get($url)->find('div.category_sub:nth-child(4) > ul > li > a')->attrs('title');
        //菌类
        $data[4] = QueryList::get($url)->find('div.category_sub:nth-child(5) > ul > li > a')->attrs('title');
        //其他
        $data[5] = QueryList::get($url)->find('div.category_sub:nth-child(6) > ul > li > a')->attrs('title');

        $url = $this->curl_get($url);
        $title = QueryList::rules(array(
            'big_category' => array('body > div.wrap > div > div.category_box.mt20 > div > h3','text'),
        ));
        $data1 = $title->setHtml($url)->removeHead()->query()->getData();
        $temp = [];
        foreach($data as $key => $value){
            foreach($value as $k => $v){
                $r = self::_checkShiCaiCategory($data1[$key]['big_category'],1);
                if ($r){
                    $tmp['parent_id'] = 0;
                    $tmp['category_name'] = $data1[$key]['big_category'];
                    $tmp['create_time'] = date('Y-m-d H:i:s');
                    $tmp['update_time'] = date('Y-m-d H:i:s');
                    $res = Db::name('shicai_category')->insert($tmp);
                    if ($res){
                        $this->parent_id = Db::name('shicai_category')->getLastInsID();
                    }else{

                    }
                }
                $result = self::_checkShiCaiCategory($v,2);
                $temp['parent_id'] = $this->parent_id;
                $temp['category_name'] = $v;
                $temp['create_time'] = date('Y-m-d H:i:s');
                $temp['update_time'] = date('Y-m-d H:i:s');
                if ($result){
                    $res = Db::name('shicai_category')->insert($temp);
                }else{
                    $res = false;
                }
                if ($res){
                    echo '采集分类成功';
                }
            }
        }
    }

    public function guopin(){
        //采集某页面所有的图片
        $url = 'https://www.meishichina.com/YuanLiao/category/guopinlei/';
        $data = [];
        //鲜果类
        $data[0] = QueryList::get($url)->find('div.category_sub:nth-child(1) > ul > li > a')->attrs('title');
        //干果类
        $data[1] = QueryList::get($url)->find('div.category_sub:nth-child(2) > ul > li > a')->attrs('title');

        $url = $this->curl_get($url);
        $title = QueryList::rules(array(
            'big_category' => array('body > div.wrap > div > div.category_box.mt20 > div > h3','text'),
        ));
        $data1 = $title->setHtml($url)->removeHead()->query()->getData();
        $temp = [];
        foreach($data as $key => $value){
            foreach($value as $k => $v){
                $r = self::_checkShiCaiCategory($data1[$key]['big_category'],1);
                if ($r){
                    $tmp['parent_id'] = 0;
                    $tmp['category_name'] = $data1[$key]['big_category'];
                    $tmp['create_time'] = date('Y-m-d H:i:s');
                    $tmp['update_time'] = date('Y-m-d H:i:s');
                    $res = Db::name('shicai_category')->insert($tmp);
                    if ($res){
                        $this->parent_id = Db::name('shicai_category')->getLastInsID();
                    }else{

                    }
                }
                $result = self::_checkShiCaiCategory($v,2);
                $temp['parent_id'] = $this->parent_id;
                $temp['category_name'] = $v;
                $temp['create_time'] = date('Y-m-d H:i:s');
                $temp['update_time'] = date('Y-m-d H:i:s');
                if ($result){
                    $res = Db::name('shicai_category')->insert($temp);
                }else{
                    $res = false;
                }
                if ($res){
                    echo '.';
                }
            }
        }
    }

    public function mimian(){
        //采集某页面所有的图片
        $url = 'https://www.meishichina.com/YuanLiao/category/mmdr/';
        $data = [];
        //米类
        $data[0] = QueryList::get($url)->find('div.category_sub:nth-child(1) > ul > li > a')->attrs('title');
        //面类
        $data[1] = QueryList::get($url)->find('div.category_sub:nth-child(2) > ul > li > a')->attrs('title');
        //豆类
        $data[2] = QueryList::get($url)->find('div.category_sub:nth-child(3) > ul > li > a')->attrs('title');
        //豆制品
        $data[3] = QueryList::get($url)->find('div.category_sub:nth-child(4) > ul > li > a')->attrs('title');
        //乳类
        $data[4] = QueryList::get($url)->find('div.category_sub:nth-child(5) > ul > li > a')->attrs('title');
        //方便食品类
        $data[5] = QueryList::get($url)->find('div.category_sub:nth-child(6) > ul > li > a')->attrs('title');

        $url = $this->curl_get($url);
        $title = QueryList::rules(array(
            'big_category' => array('body > div.wrap > div > div.category_box.mt20 > div > h3','text'),
        ));
        $data1 = $title->setHtml($url)->removeHead()->query()->getData();
        $temp = [];
        foreach($data as $key => $value){
            foreach($value as $k => $v){
                $r = self::_checkShiCaiCategory($data1[$key]['big_category'],1);
                if ($r){
                    $tmp['parent_id'] = 0;
                    $tmp['category_name'] = $data1[$key]['big_category'];
                    $tmp['create_time'] = date('Y-m-d H:i:s');
                    $tmp['update_time'] = date('Y-m-d H:i:s');
                    $res = Db::name('shicai_category')->insert($tmp);
                    if ($res){
                        $this->parent_id = Db::name('shicai_category')->getLastInsID();
                    }else{

                    }
                }
                $result = self::_checkShiCaiCategory($v,2);
                $temp['parent_id'] = $this->parent_id;
                $temp['category_name'] = $v;
                $temp['create_time'] = date('Y-m-d H:i:s');
                $temp['update_time'] = date('Y-m-d H:i:s');
                if ($result){
                    $res = Db::name('shicai_category')->insert($temp);
                }else{
                    $res = false;
                }
                if ($res){
                    echo '.';
                }
            }
        }
    }

    public function tiaoweipin(){
        $url = 'https://www.meishichina.com/YuanLiao/category/tiaoweipinl/';
        $data = [];
        //调味品
        $data[0] = QueryList::get($url)->find('div.category_sub:nth-child(1) > ul > li > a')->attrs('title');
        //食用油
        $data[1] = QueryList::get($url)->find('div.category_sub:nth-child(2) > ul > li > a')->attrs('title');

        $url = $this->curl_get($url);
        $title = QueryList::rules(array(
            'big_category' => array('body > div.wrap > div > div.category_box.mt20 > div > h3','text'),
        ));
        $data1 = $title->setHtml($url)->removeHead()->query()->getData();
        $temp = [];
        foreach($data as $key => $value){
            foreach($value as $k => $v){
                $r = self::_checkShiCaiCategory($data1[$key]['big_category'],1);
                if ($r){
                    $tmp['parent_id'] = 0;
                    $tmp['category_name'] = $data1[$key]['big_category'];
                    $tmp['create_time'] = date('Y-m-d H:i:s');
                    $tmp['update_time'] = date('Y-m-d H:i:s');
                    $res = Db::name('shicai_category')->insert($tmp);
                    if ($res){
                        $this->parent_id = Db::name('shicai_category')->getLastInsID();
                    }else{

                    }
                }
                $result = self::_checkShiCaiCategory($v,2);
                $temp['parent_id'] = $this->parent_id;
                $temp['category_name'] = $v;
                $temp['create_time'] = date('Y-m-d H:i:s');
                $temp['update_time'] = date('Y-m-d H:i:s');
                if ($result){
                    $res = Db::name('shicai_category')->insert($temp);
                }else{
                    $res = false;
                }
                if ($res){
                    echo '.';
                }
            }
        }
    }

    public function yaoshi(){
        $url = 'https://www.meishichina.com/YuanLiao/category/yaoshiqita/';
        $data = [];
        //药食
        $data[0] = QueryList::get($url)->find('div.category_sub:nth-child(1) > ul > li > a')->attrs('title');

        $temp = [];
        $url = $this->curl_get($url);
        $title = QueryList::rules(array(
            'big_category' => array('body > div.wrap > div > div.category_box.mt20 > div > h3','text'),
        ));
        $data1 = $title->setHtml($url)->removeHead()->query()->getData();

        foreach($data as $key => $value){
            foreach($value as $k => $v){
                $r = self::_checkShiCaiCategory($data1[$key]['big_category'],1);
                if ($r){
                    $tmp['parent_id'] = 0;
                    $tmp['category_name'] = $data1[$key]['big_category'];
                    $tmp['create_time'] = date('Y-m-d H:i:s');
                    $tmp['update_time'] = date('Y-m-d H:i:s');
                    $res = Db::name('shicai_category')->insert($tmp);
                    if ($res){
                        $this->parent_id = Db::name('shicai_category')->getLastInsID();
                    }else{

                    }
                }
                $result = self::_checkShiCaiCategory($v,2);
                $temp['parent_id'] = $this->parent_id;
                $temp['category_name'] = $v;
                $temp['create_time'] = date('Y-m-d H:i:s');
                $temp['update_time'] = date('Y-m-d H:i:s');
                if ($result){
                    $res = Db::name('shicai_category')->insert($temp);
                }else{
                    $res = false;
                }
                if ($res){
                    echo '.';
                }
            }
        }
    }

    public function food_category(){
        $url = 'https://home.meishichina.com/recipe-type.html';
        $data = [];
        //常见菜式
        $data[0] = QueryList::get($url)->find('div.category_sub:nth-child(1) > ul > li > a')->attrs('title');
        //主食/小吃
        $data[1] = QueryList::get($url)->find('div.category_sub:nth-child(2) > ul > li > a')->attrs('title');
        //甜品/饮品
        $data[2] = QueryList::get($url)->find('div.category_sub:nth-child(3) > ul > li > a')->attrs('title');
        //适宜人群
        $data[3] = QueryList::get($url)->find('div.category_sub:nth-child(4) > ul > li > a')->attrs('title');
        //食疗食补
        $data[4] = QueryList::get($url)->find('div.category_sub:nth-child(5) > ul > li > a')->attrs('title');
        //场景
        $data[5] = QueryList::get($url)->find('div.category_sub:nth-child(6) > ul > li > a')->attrs('title');
        //饮食方式
        $data[6] = QueryList::get($url)->find('div.category_sub:nth-child(7) > ul > li > a')->attrs('title');
        //中式菜式
        $data[7] = QueryList::get($url)->find('div.category_sub:nth-child(8) > ul > li > a')->attrs('title');
        //外国美食
        $data[8] = QueryList::get($url)->find('div.category_sub:nth-child(9) > ul > li > a')->attrs('title');
        //烘焙
        $data[9] = QueryList::get($url)->find('div.category_sub:nth-child(10) > ul > li > a')->attrs('title');
        //传统美食
        $data[10] = QueryList::get($url)->find('div.category_sub:nth-child(11) > ul > li > a')->attrs('title');
        //节日食俗
        $data[11] = QueryList::get($url)->find('div.category_sub:nth-child(12) > ul > li > a')->attrs('title');
        //按制作难度
        $data[12] = QueryList::get($url)->find('div.category_sub:nth-child(13) > ul > li > a')->attrs('html');
        //按所需时间
        $data[13] = QueryList::get($url)->find('div.category_sub:nth-child(14) > ul > li > a')->attrs('text');
        //按菜品口味
        $data[14] = QueryList::get($url)->find('div.category_sub:nth-child(15) > ul > li > a')->attrs('text');
        //按主要工艺
        $data[15] = QueryList::get($url)->find('div.category_sub:nth-child(16) > ul > li > a')->attrs('text');

        $url = $this->curl_get($url);
        $title = QueryList::rules(array(
            'big_category' => array('body > div.wrap > div > div.category_box.mt20 > div > h3','text'),
//            0 => array('body > div.wrap > div > div > div:nth-child(1) > ul > li > a','text'),
        ));
//        echo '<pre>';
        $data1 = $title->setHtml($url)->removeHead()->query()->getData();
//        print_r($data1);

        $temp = [];
        foreach($data as $key => $value){
            foreach($value as $k => $v){
                $r = self::_checkFoodCategory($data1[$key]['big_category']);
                if ($r){
                    $tmp['parent_id'] = 0;
                    $tmp['food_category_name'] = $data1[$key]['big_category'];
                    $tmp['create_time'] = date('Y-m-d H:i:s');
                    $tmp['update_time'] = date('Y-m-d H:i:s');
                    $res = Db::name('food_category')->insert($tmp);
                    if ($res){
                        $this->parent_id = Db::name('food_category')->getLastInsID();
                    }else{

                    }
                }
                $result = self::_checkFoodCategory($v);
                $temp['parent_id'] = $this->parent_id;
                $temp['food_category_name'] = $v;
                $temp['create_time'] = date('Y-m-d H:i:s');
                $temp['update_time'] = date('Y-m-d H:i:s');
                if ($result){
                    $res = Db::name('food_category')->insert($temp);
                }else{
                    $res = false;
                }
                if ($res){
                    echo '.';
                }
            }
        }
    }

    public function shiliao_category(){
        $url = 'https://www.meishichina.com/YuanLiao/gongxiao/';
        $data = [];
        //养生保健
        $data[0] = QueryList::get($url)->find('div.category_sub:nth-child(1) > ul > li > a')->attrs('title');
        //美容减肥
        $data[1] = QueryList::get($url)->find('div.category_sub:nth-child(2) > ul > li > a')->attrs('title');
        //男性
        $data[2] = QueryList::get($url)->find('div.category_sub:nth-child(3) > ul > li > a')->attrs('title');
        //女性
        $data[3] = QueryList::get($url)->find('div.category_sub:nth-child(4) > ul > li > a')->attrs('title');
        //孕前哺乳
        $data[4] = QueryList::get($url)->find('div.category_sub:nth-child(5) > ul > li > a')->attrs('title');
        //神经系统
        $data[5] = QueryList::get($url)->find('div.category_sub:nth-child(6) > ul > li > a')->attrs('title');
        //呼吸道
        $data[6] = QueryList::get($url)->find('div.category_sub:nth-child(7) > ul > li > a')->attrs('title');
        //心血管
        $data[7] = QueryList::get($url)->find('div.category_sub:nth-child(8) > ul > li > a')->attrs('title');
        //肝胆脾胰
        $data[8] = QueryList::get($url)->find('div.category_sub:nth-child(9) > ul > li > a')->attrs('title');
        //五官
        $data[9] = QueryList::get($url)->find('div.category_sub:nth-child(10) > ul > li > a')->attrs('title');
        //肌肉骨骼
        $data[10] = QueryList::get($url)->find('div.category_sub:nth-child(11) > ul > li > a')->attrs('title');
        //癌症
        $data[11] = QueryList::get($url)->find('div.category_sub:nth-child(12) > ul > li > a')->attrs('title');
        //其他
        $data[12] = QueryList::get($url)->find('div.category_sub:nth-child(13) > ul > li > a')->attrs('title');

        $url = $this->curl_get($url);
        $title = QueryList::rules(array(
            'big_category' => array('body > div.wrap > div > div.category_box.mt20 > div > h3','text'),
        ));
        $data1 = $title->setHtml($url)->removeHead()->query()->getData();

        $temp = [];
        foreach($data as $key => $value){
            $r = self::_checkHealthCategory($data1[$key]['big_category']);
            if ($r){
                $tmp['parent_id'] = 0;
                $tmp['health_category_name'] = $data1[$key]['big_category'];
                $tmp['create_time'] = date('Y-m-d H:i:s');
                $tmp['update_time'] = date('Y-m-d H:i:s');
                $res = Db::name('health_category')->insert($tmp);
                if ($res){
                    $this->parent_id = Db::name('health_category')->getLastInsID();
                }else{

                }
            }
            foreach($value as $k => $v){
                $result = self::_checkHealthCategory($v);
                $temp['parent_id'] = $this->parent_id;
                $temp['health_category_name'] = $v;
                $temp['create_time'] = date('Y-m-d H:i:s');
                $temp['update_time'] = date('Y-m-d H:i:s');
                if ($result){
                    $res = Db::name('health_category')->insert($temp);
                }else{
                    $res = false;
                }
                if ($res){
                    echo '.';
                }
            }
        }
    }


    public function recai(){
        $max = input('max/d',1000);
        $min = input('min/d',990);
        for($j = $max;$j > $min;$j-- ) {
            try{
//                $url = file_get_contents('https://home.meishichina.com/recipe/recai/page/' . $j . '/');
                $html = 'https://home.meishichina.com/recipe/recai/page/' . $j . '/';
                $url = $this->curl_get($html);
                $ql = QueryList::rules(array(
                    'food_name' => array('#J_list >ul > li >.detail > h2>a', 'text'),
                    'food_url' => array('#J_list >ul > li >.detail > h2>a', 'href'),
                    'tags' => array('#J_list >ul > li >.detail > p.subcontent', 'text'),
                    'images' => array('#J_list > ul > li > div.pic > a > img', 'data-src'),
                    'page' => array('.ui-page-inner .now_page', 'text'),
                ));
                $data = $ql->setHtml($url)->removeHead()->query()->getData();

                Db::startTrans();
                foreach ($data as $key => $value) {
                    if ($key == 0) {
                        unset($value['page']);
                    }
                    $oldid = explode('.',explode('-',$value['food_url'])[1])[0];
                    if (Db::name('food')->where('old_id='.$oldid)->find()){
                        continue;
                    }
                    $value['create_time'] = $value['update_time'] = date('Y-m-d H:i:s');
                    $value['images'] = explode('?', $value['images'])[0];
                    $res1 = Db::name('food_list')->insert($value);
                    $this->food_list_id = Db::name('food_list')->getLastInsID();

                    if (!$res1) {
                        Db::rollback();
                    } else {
//                        $value['food_url'] = 'https://home.meishichina.com/recipe-159194.html';
//                        $value['food_url'] = 'https://home.meishichina.com/recipe-416629.html';
//                        $value['food_url'] = 'https://home.meishichina.com/recipe-160102.html';
//                        $value['food_url'] = 'https://home.meishichina.com/recipe-171603.html';
//                        $value['food_url'] = 'https://home.meishichina.com/recipe-168634.html';
                        $value['food_url'] = 'https://home.meishichina.com/recipe-167154.html';

                        if (Db::name('food')->where('old_id=' . $oldid)->find()) {
                            Db::rollback();
                            continue;
                        }
                        $html = $this->curl_get($value['food_url']);
                        if (!$html) {
                            echo $value['food_url'];
                        }

                        $data1['old_id'] = explode('.', explode('-', $value['food_url'])[1])[0];
                        $food2 = QueryList::rules(array(
                            'space_id' => array('body > div.wrap > div > div.space_left > div.space_box_home > div > div > a', 'href')
                        ));
                        $data3 = $food2->setHtml($html)->removeHead()->query()->getData();
                        $food2->destruct();

                        $food1 = QueryList::rules(array(
                            'tips' => array('.recipeTip', 'text'),
                        ));
                        $data2 = $food1->setHtml($html)->removeHead()->query()->getData();
                        $length = count($data2);
                        $food1->destruct();

                        $food = QueryList::rules(array(
                            'food_name' => array('#recipe_title', 'text'),
                            'descrpition' => array('#block_txt1', 'text'),
                            'top_image' => array('#recipe_De_imgBox > a > img', 'src'),
                            'main_material' => array('div.recipeCategory_sub_R.clear', 'html'),
//                            'other_tags' => array('body > div.wrap > div > div.space_left > div.space_box_home > div > fieldset > div > ul', 'html'),
                            'assist_material' => array('div.recipeCategory_sub_R.mt30.clear', 'html'),
                            'other_tags' => array('recipeCategory_sub_R.mt30.clear', 'html'),
                            'images' => array('.recipeStep_img > img', 'src'),
                            'cooking_process' => array('.recipeStep_word', 'text'),
                        ));

                        $data = $food->setHtml($html)->removeHead()->query()->getData();
//                        echo '<pre>';
//                        print_r($data);
//                        exit;
                        $food->destruct();

                        if (!isset($data[0]['food_name'])) {
                            $data1['food_name'] = '';
                        } else {
                            $data1['food_name'] = htmlspecialchars($data[0]['food_name']);
                        }

                        if (!isset($data[0]['descrpition'])) {
                            $data1['descrpition'] = '';
                        } else {
                            $data1['descrpition'] = json_encode(htmlspecialchars($data[0]['descrpition']));
                        }

                        if (!isset($data[0]['top_image'])) {
                            $data1['top_image'] = '';
                        } else {
                            $data1['top_image'] = explode("?", $data[0]['top_image'])[0];
                        }

                        $count = count($data);
                        if ($count > 0) {
                            for ($i = 0; $i < $count; $i++) {
                                if (isset($data[$i]['images'])) {
                                    $data1['images'][$i] = explode('?', $data[$i]['images'])[0];
                                }
                                if (isset($data[$i]['cooking_process'])) {
                                    $data1['cooking_process'][$i] = $data[$i]['cooking_process'];
                                }
                            }
                        } else {

                        }
                        if (isset($data1['images']) && $data1['images'] != '') {
                            $data1['images'] = json_encode($data1['images']);
                        }
                        $data1['cooking_process'] = json_encode($data1['cooking_process']);
                        if (isset($data[0]['main_material'])) {
                            preg_match_all('/<b>(.+?)<\/b>/', $data[0]['main_material'], $tag1);
                            preg_match_all('/<span class="category_s2">(.+?)<\/span>/', $data[0]['main_material'], $tag2);
                            str_replace('<b>', '', $tag1[1]);
                            str_replace('</b>', '', $tag1[1]);
                            if (count($tag1[1]) == count($tag2[1])){
                                $main_material = array_combine($tag1[1], $tag2[1]);
                                $data1['main_material'] = json_encode($main_material);
                            }else{
                                $tmp = array();
                                if (count($tag1[1]) < count($tag2[1])){
                                    foreach ($tag1[1] as $key => $value){
                                        $tmp[$key] = $tag2[1][$key];
                                    }
                                    if (!empty($tag1[1]) && !empty($tmp)){
                                        $main_material = array_combine($tag1[1], $tmp);
                                    }else{
                                        $main_material = false;
                                    }
                                }else{
                                    foreach ($tag2[1] as $key => $value){
                                        $tmp[$key] = $tag1[1][$key];
                                    }
                                    if (!empty($tag2[1]) && !empty($tmp)){
                                        $main_material = array_combine($tmp, $tag2[1]);
                                    }else{
                                        $main_material = false;
                                    }
                                }
                                if (!empty($main_material)){
                                    $data1['main_material'] = json_encode($main_material);
                                }else{
                                    $data1['main_material'] = 'error';
                                }
                            }

                            if ($main_material == 'error'){
                                preg_match_all('/target="_blank">(.+?)<\/a>/', $data[0]['main_material'], $tag1);
                                preg_match_all('/<span class="category_s2">(.+?)<\/span>/', $data[0]['main_material'], $tag2);
                                str_replace('<b>', '', $tag1[1]);
                                str_replace('</b>', '', $tag1[1]);
                                if (count($tag1[1]) == count($tag2[1])){
                                    $main_material = array_combine($tag1[1], $tag2[1]);
                                    $data1['main_material'] = json_encode($main_material);
                                }else{
                                    $tmp = array();
                                    if (count($tag1[1]) < count($tag2[1])){
                                        foreach ($tag1[1] as $key => $value){
                                            $tmp[$key] = $tag2[1][$key];
                                        }
                                        if (!empty($tag1[1]) && !empty($tmp)){
                                            $main_material = array_combine($tag1[1], $tmp);
                                        }else{
                                            $main_material = false;
                                        }
                                    }else{
                                        foreach ($tag2[1] as $key => $value){
                                            $tmp[$key] = $tag1[1][$key];
                                        }
                                        if (!empty($tag2[1]) && !empty($tmp)){
                                            $main_material = array_combine($tmp, $tag2[1]);
                                        }else{
                                            $main_material = false;
                                        }
                                    }
                                    if (!empty($main_material)){
                                        $data1['main_material'] = json_encode($main_material);
                                    }else{
                                        $data1['main_material'] = 'error';
                                    }
                                }
                            }
                        }

                        if (isset($data[1]['main_material'])) {
                            preg_match_all('/<b>(.+?)<\/b>/', $data[1]['main_material'], $tag3);
                            preg_match_all('/<span class="category_s2">(.+?)<\/span>/', $data[1]['main_material'], $tag4);
                            str_replace('<b>', '', $tag3[1]);
                            str_replace('</b>', '', $tag3[1]);
                            if (count($tag3[1]) == count($tag4[1])) {
                                $assist_material = array_combine($tag3[1], $tag4[1]);
                                $data1['assist_material'] = json_encode($assist_material);
                            }else{
                                $tmp = array();
                                if (count($tag3[1]) < count($tag4[1])){
                                    foreach ($tag3[1] as $key => $value){
                                        $tmp[$key] = $tag4[1][$key];
                                    }
                                    if (!empty($tag3[1]) && !empty($tmp)){
                                        $assist_material = array_combine($tag3[1], $tmp);
                                    }else{
                                        $assist_material = false;
                                    }

                                }else{
                                    foreach ($tag4[1] as $key => $value){
                                        $tmp[$key] = $tag3[1][$key];
                                    }
                                    if (!empty($tag4[1]) && !empty($tmp)){
                                        $assist_material = array_combine($tmp, $tag4[1]);
                                    }else{
                                        $assist_material = false;
                                    }

                                }

                                if (!empty($assist_material)){
                                    $data1['assist_material'] = json_encode($assist_material);
                                }else{
                                    $data1['assist_material'] = 'error';
                                }
                            }
                            if ($assist_material == 'error'){
                                preg_match_all('/target="_blank">(.+?)<\/a>/', $data[1]['main_material'], $tag3);
                                preg_match_all('/<span class="category_s2">(.+?)<\/span>/', $data[1]['main_material'], $tag4);
                                str_replace('<b>', '', $tag3[1]);
                                str_replace('</b>', '', $tag3[1]);
                                if (count($tag3[1]) == count($tag4[1])) {
                                    $assist_material = array_combine($tag3[1], $tag4[1]);
                                    $data1['assist_material'] = json_encode($assist_material);
                                }else{
                                    $tmp = array();
                                    if (count($tag3[1]) < count($tag4[1])){
                                        foreach ($tag3[1] as $key => $value){
                                            $tmp[$key] = $tag4[1][$key];
                                        }
                                        if (!empty($tag3[1]) && !empty($tmp)){
                                            $assist_material = array_combine($tag3[1], $tmp);
                                        }else{
                                            $assist_material = false;
                                        }
                                    }else{
                                        foreach ($tag4[1] as $key => $value){
                                            $tmp[$key] = $tag3[1][$key];
                                        }
                                        if (!empty($tag4[1]) && !empty($tmp)){
                                            $assist_material = array_combine($tmp, $tag4[1]);
                                        }else{
                                            $assist_material = false;
                                        }
                                    }
                                    if (!empty($assist_material)){
                                        $data1['assist_material'] = json_encode($assist_material);
                                    }else{
                                        $data1['assist_material'] = 'error';
                                    }
                                }
                            }

                        }
                        if (isset($data[2]['main_material'])) {
//                            preg_match_all('/target="_blank">(.+?)<\/a>/', $data[2]['main_material'], $tag33);
                            preg_match_all('/title="(.+?)"/', $data[2]['main_material'], $tag33);
                            preg_match_all('/<b>(.+?)<\/b>/', $data[2]['main_material'], $tag33);
//                            var_dump($tag33);exit;
                            preg_match_all('/<span class="category_s2">(.+?)<\/span>/', $data[2]['main_material'], $tag44);
                            str_replace('<b>', '', $tag33[1]);
                            str_replace('</b>', '', $tag33[1]);
                            if (count($tag33[1]) == count($tag44[1])) {
                                $mix_material = array_combine($tag33[1], $tag44[1]);
                                $data1['mix_material'] = json_encode($mix_material);
                            }else{
                                $tmp = array();
                                if (count($tag33[1]) < count($tag44[1])){
                                    foreach ($tag33[1] as $key => $value){
                                        $tmp[$key] = $tag44[1][$key];
                                    }
                                    if (!empty($tmp) && !empty($tag33[1])){
                                        $mix_material = array_combine($tag33[1], $tmp);
                                    }else{
                                        $mix_material = false;
                                    }
                                }else{
                                    foreach ($tag44[1] as $key => $value){
                                        $tmp[$key] = $tag33[1][$key];
                                    }
                                    if (!empty($tmp) && !empty($tag44[1])){
                                        $mix_material = array_combine($tmp, $tag44[1]);
                                    }else{
                                        $mix_material = false;
                                    }
                                }
                                if (!empty($mix_material)){
                                    $data1['mix_material'] = json_encode($mix_material);
                                }else{
                                    $data1['mix_material'] = 'error';
                                }

                            }
                            if ($mix_material == 'error'){
                                preg_match_all('/<b>(.+?)<\/b>/', $data[2]['main_material'], $tag33);
                                preg_match_all('/<span class="category_s2">(.+?)<\/span>/', $data[2]['main_material'], $tag44);
                                str_replace('<b>', '', $tag33[1]);
                                str_replace('</b>', '', $tag33[1]);
                                if (count($tag33[1]) == count($tag44[1])) {
                                    $mix_material = array_combine($tag33[1], $tag44[1]);
                                    $data1['mix_material'] = json_encode($mix_material);
                                }else{
                                    $tmp = array();
                                    if (count($tag33[1]) < count($tag44[1])){
                                        foreach ($tag33[1] as $key => $value){
                                            $tmp[$key] = $tag44[1][$key];
                                        }
                                        if (!empty($tmp) && !empty($tag33[1])){
                                            $mix_material = array_combine($tag33[1], $tmp);
                                        }else{
                                            $mix_material = false;
                                        }
                                    }else{
                                        foreach ($tag44[1] as $key => $value){
                                            $tmp[$key] = $tag33[1][$key];
                                        }
                                        if (!empty($tmp) && !empty($tag44[1])){
                                            $mix_material = array_combine($tmp, $tag44[1]);
                                        }else{
                                            $mix_material = false;
                                        }
                                    }
                                    if (!empty($mix_material)) {
                                        $data1['mix_material'] = json_encode($mix_material);
                                    }else{
                                        $data1['mix_material'] = 'error';
                                    }
                                }
                            }
                        }

                        if (isset($data[3]['main_material'])) {
                            preg_match_all('/target="_blank">(.+?)<\/a>/', $data[3]['main_material'], $tag333);
                            preg_match_all('/<span class="category_s2">(.+?)<\/span>/', $data[3]['main_material'], $tag443);
                            str_replace('<b>', '', $tag333[1]);
                            str_replace('</b>', '', $tag333[1]);
                            if (count($tag333[1]) == count($tag443[1])) {
                                $other_tags = array_combine($tag333[1], $tag443[1]);
                                $data1['other_tags'] = json_encode($other_tags);
                            }else{
                                $tmp = array();
                                if (count($tag333[1]) < count($tag443[1])){
                                    foreach ($tag333[1] as $key => $value){
                                        $tmp[$key] = $tag443[1][$key];
                                    }
                                    if (!empty($tmp) && !empty($tag333[1])){
                                        $other_tags = array_combine($tag333[1], $tmp);
                                    }else{
                                        $other_tags = false;
                                    }

                                }else{
                                    foreach ($tag443[1] as $key => $value){
                                        $tmp[$key] = $tag333[1][$key];
                                    }
                                    if (!empty($tmp) && !empty($tag443[1])){
                                        $other_tags = array_combine($tmp, $tag443[1]);
                                    }else{
                                        $other_tags = false;
                                    }

                                }

                                if (!empty($other_tags)){
                                    $data1['other_tags'] = json_encode($other_tags);
                                }else{
                                    $data1['other_tags'] = 'error';
                                }
                            }
                            if ($other_tags == 'error') {
                                preg_match_all('/target="_blank">(.+?)<\/a>/', $data[3]['main_material'], $tag333);
                                preg_match_all('/<span class="category_s2">(.+?)<\/span>/', $data[3]['main_material'], $tag443);
                                str_replace('<b>', '', $tag333[1]);
                                str_replace('</b>', '', $tag333[1]);
                                if (count($tag333[1]) == count($tag443[1])) {
                                    $other_tags = array_combine($tag333[1], $tag443[1]);
                                    $data1['other_tags'] = json_encode($other_tags);
                                } else {
                                    $tmp = array();
                                    if (count($tag333[1]) < count($tag443[1])){
                                        foreach ($tag333[1] as $key => $value){
                                            $tmp[$key] = $tag443[1][$key];
                                        }
                                        if (!empty($tmp) && !empty($tag333[1])){
                                            $other_tags = array_combine($tag333[1], $tmp);
                                        }else{
                                            $other_tags = false;
                                        }
                                    }else{
                                        foreach ($tag443[1] as $key => $value){
                                            $tmp[$key] = $tag333[1][$key];
                                        }
                                        if (!empty($tmp) && !empty($tag443[1])){
                                            $other_tags = array_combine($tmp, $tag443[1]);
                                        }else{
                                            $other_tags = false;
                                        }
                                    }
                                    if (!empty($other_tags)){
                                        $data1['other_tags'] = json_encode($other_tags);
                                    }else{
                                        $data1['other_tags'] = 'error';
                                    }
                                }
                            }
                        }

                        if ($length > 3) {
                            $data1['tips'] = json_encode($data2[$length - 4]['tips']);
                        }

                        $data1['space_id'] = explode('.', explode('-', $data3[1]['space_id'])[1])[0];
                        if ($length > 0) {
                            if (strpos($data2[$length - 2]['tips'], '：') > 0) {
                                $data1['kitchen_ware'] = explode('：', $data2[$length - 2]['tips'])[1];
                            } else {
                                $data1['kitchen_ware'] = 'error';
                            }
                        }
                        $data1['big_category'] = explode('|', str_replace('&nbsp;&nbsp;', '|', htmlentities(trim(explode('：', $data2[$length - 1]['tips'])[1]))));
                        foreach ($data1['big_category'] as $k => $v) {
                            $data1['big_category'][$k] = trim($v);
                        }
                        $count = count($data1['big_category']);
                        unset($data1['big_category'][$count - 1]);
                        $big_category = $data1['big_category'];
                        unset($data1['big_category']);

                        $data1['create_time'] = date('Y-m-d H:i:s');
                        $data1['update_time'] = date('Y-m-d H:i:s');

                        $old = Db::name('food')->where('old_id=' . $data1['old_id'])->find();
//                        var_dump($old);
//                        echo '<pre>';
//                        print_r($data1);exit;
                        if (!$old) {
                            $res = Db::name('food')->insert($data1);
                            $this->last_id = Db::name('food')->getLastInsID();

                            if (isset($main_material)){
                                if (!empty($main_material) && !empty($main_material)){
                                    unset($shicai_category1);
                                    foreach ($main_material as $key => $value) {
                                        unset($shicai_category1);
                                        $r = Db::name('shicai_category')->where('category_name="' . $key . '"')->find();
                                        if ($r) {
                                            $shicai_category1[] = $r['category_id'];
                                        }
                                        $r = Db::name('food_category')->where('food_category_name="' . $key . '"')->find();
                                        if ($r) {
                                            $shicai_category1[] = $r['food_category_id'];
                                        }
                                    }
                                }
                            }else{
                                $shicai_category1 = false;
                            }
                            if (isset($assist_material)){
                                if (is_array($assist_material) && !empty($assist_material)) {
                                    unset($shicai_category2);
                                    foreach ($assist_material as $key => $value) {
                                        $r = Db::name('shicai_category')->where('category_name="' . $key . '"')->find();
                                        if ($r) {
                                            $shicai_category2[] = $r['category_id'];
                                        }
                                        $r = Db::name('food_category')->where('food_category_name="' . $key . '"')->find();
                                        if ($r) {
                                            $shicai_category2[] = $r['food_category_id'];
                                        }
                                    }
                                }
                            }else{
                                $shicai_category2 = false;
                            }
                            if (isset($mix_material)){
                                if (is_array($mix_material) && !empty($mix_material)) {
                                    unset($shicai_category3);
                                    foreach ($mix_material as $key => $value) {
                                        $r = Db::name('shicai_category')->where('category_name="' . $key . '"')->find();
                                        if ($r) {
                                            $shicai_category3[] = $r['category_id'];
                                        }
                                        $r = Db::name('food_category')->where('food_category_name="' . $key . '"')->find();
                                        if ($r) {
                                            $shicai_category3[] = $r['food_category_id'];
                                        }
                                    }
                                }
                            }else{
                                $shicai_category3 = false;
                            }
                            if (isset($other_tags)){
                                if (is_array($other_tags) && !empty($other_tags)) {
                                    unset($food_category);
                                    foreach ($other_tags as $key => $value) {
                                        $r = Db::name('food_category')->where('food_category_name="' . $key . '"')->find();
                                        if ($r) {
                                            $food_category[] = $r['food_category_id'];
                                        }else{
                                            $food_category = false;
                                        }
                                    }
                                }
                            }else{
                                $food_category = false;
                            }

//                            var_dump($shicai_category1);
//                            var_dump($shicai_category2);
//                            var_dump($shicai_category3);
//                            var_dump($food_category);exit;
                            if (!empty($shicai_category1)) {
                                foreach ($shicai_category1 as $value) {
                                    $where1['shicai_category_id'] = $value;
                                    $where1['food_id'] = $this->last_id;
                                    $s = Db::name('shicai_category_relation')->where($where1)->find();
                                    if (!$s) {
                                        $where1['create_time'] = $where1['update_time'] = date('Y-m-d H:i:s');
                                        $t = Db::name('shicai_category_relation')->insert($where1);
                                        if (!$t) {
                                            Log::record('菜谱' . $where1['food_id'] . '分类' . $where1['shicai_category_id'] . '没有创建', 'error');
                                        }
                                        unset($where1);
                                    }
                                }
                            }

                            if (!empty($shicai_category2)) {
                                foreach ($shicai_category2 as $value) {
                                    $where2['shicai_category_id'] = $value;
                                    $where2['food_id'] = $this->last_id;
                                    $s = Db::name('shicai_category_relation')->where($where2)->find();
                                    if (!$s) {
                                        $where2['create_time'] = $where2['update_time'] = date('Y-m-d H:i:s');
                                        $t = Db::name('shicai_category_relation')->insert($where2);
                                        if (!$t) {
                                            Log::record('菜谱' . $where2['food_id'] . '分类' . $where2['shicai_category_id'] . '没有创建', 'error');
                                        }
                                        unset($where2);
                                    }
                                }
                            }

                            if (!empty($shicai_category3)) {
                                foreach ($shicai_category3 as $value) {
                                    $where4['shicai_category_id'] = $value;
                                    $where4['food_id'] = $this->last_id;
                                    $s = Db::name('shicai_category_relation')->where($where4)->find();
                                    if (!$s) {
                                        $where4['create_time'] = $where4['update_time'] = date('Y-m-d H:i:s');
                                        $t = Db::name('shicai_category_relation')->insert($where4);
                                        if (!$t) {
                                            Log::record('菜谱' . $where4['food_id'] . '分类' . $where4['shicai_category_id'] . '没有创建', 'error');
                                        }
                                        unset($where4);
                                    }
                                }
                            }
//                            var_dump($food_category);exit;
                            if (!empty($food_category)) {
                                foreach ($food_category as $value) {
                                    $where3['food_category_id'] = $value;
                                    $where3['food_id'] = $this->last_id;
                                    $s = Db::name('food_category_relation')->where($where3)->find();
                                    if (!$s) {
                                        $where3['create_time'] = $where3['update_time'] = date('Y-m-d H:i:s');
                                        $t = Db::name('food_category_relation')->insert($where3);
                                        if (!$t) {
                                            Log::record('菜谱' . $where3['food_id'] . '分类' . $where3['food_category_id'] . '没有创建', 'error');
                                        }
                                        unset($where3);
                                    }else{
                                        continue;
                                    }
                                }
                            }

                        } else {
                            Db::rollback();
                            continue;
                        }

                        if (!$res) {
                            Db::rollback();
                        } else {
                            foreach ($big_category as $value) {
                                $where['food_category_name'] = $value;
                                $food_category = Db::name('food_category')->where($where)->find();
                                $ralation = array();
                                if ($food_category['food_category_id'] > 0) {
                                    $ralation['food_category_id'] = $food_category['food_category_id'];
                                    $ralation['food_id'] = $this->last_id;
                                    if (Db::name('food_category_relation')->where($ralation)->find()){
                                        continue;
                                    }
                                    $ralation['create_time'] = date('Y-m-d H:i:s');
                                    $ralation['update_time'] = date('Y-m-d H:i:s');
                                    $res = Db::name('food_category_relation')->insert($ralation);
                                    if ($res) {
                                        $t =Db::name('food_list')->where('list_id='.$this->food_list_id)->update(['food_id' => $this->last_id ]);
                                            if ($t){
                                                Db::commit();
                                                unset($data1);
//                                                sleep(rand(1,5));
                                            }
                                    } else {
                                        Db::rollback();
                                    }
                                }
                            }
                        }
                    }
                }
            }catch (Exception $e){
                echo 'Message: ' .$e->getMessage();
            }
//            exit;
        }

    }

    private static function _checkShiCaiCategory($category,$type = 1){
        if ($type == 1){
            $res = Db::name('shicai_category')->where('category_name="'.$category.'" and parent_id = 0')->find();
        }else{
            $res = Db::name('shicai_category')->where('category_name="'.$category.'" and parent_id != 0')->find();
        }

        if ($res){
            return false;
        }else{
            return true;
        }
    }

    private static function _checkFoodCategory($category){
        $res = Db::name('food_category')->where('food_category_name="'.$category.'"')->find();
        if ($res){
            return false;
        }else{
            return true;
        }
    }

    private static function _checkHealthCategory($category){
        $res = Db::name('health_category')->where('health_category_name="'.$category.'"')->find();
        if ($res){
            return false;
        }else{
            return true;
        }
    }

    public function start(){
        $this->recai();
    }

    public function curl_get($html){

        $url = $html;

        $ch = curl_init();

        //设置选项，包括URL
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_HEADER, 0);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);//绕过ssl验证
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);

        //执行并获取HTML文档内容
        $output = curl_exec($ch);

        //释放curl句柄
        curl_close($ch);
        return $output;
    }

    public function order_list(){
        $page = input('page/d');
        $pageSize = 4;
        $list = Db::name('food')->field('food_id,food_name,update_time')->select();
        $count = Db::name('food')->field('food_id,food_name,update_time')->count();
        $day = '';
        foreach ($list as $key => $value){
            if ($key == 0){
                $day = isset($list[0]['update_time']) ? date('Y-m-d',strtotime($list[0]['update_time'])) : '';
                array_unshift($list[0],$day);
            }
            if ($day != date('Y-m-d',strtotime($value['update_time']))){
//                echo date('Y-m-d',strtotime($value['update_time']));
                $day = date('Y-m-d',strtotime($value['update_time']));
                array_unshift($list[$key],$day);
            }
        }
//        array_unshift($list,$day);
//        var_dump($list);
        echo count($list);exit;

        foreach($list as $key => $value){
            if (isset($value[0])){
                echo $value[0];
            }

        }
    }
}